package com.zaitunlabs.zlcore.utils;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;

import java.util.ArrayList;

/**
 * Created by ahsai on 12/7/2017.
 */

public class PermissionUtils {
    private int requestCode;
    private Runnable taskWillDo;
    private Activity activity;
    public PermissionUtils(Activity activity, int requestCode, Runnable taskWillDo){
        this.activity = activity;
        this.requestCode = requestCode;
        this.taskWillDo = taskWillDo;
    }


    public static PermissionUtils checkPermissionAndGo(Activity activity, int requestCode, Runnable taskWillDo,String... permissions){
        PermissionUtils permissionUtils = new PermissionUtils(activity, requestCode, taskWillDo);
        permissionUtils.arePermissionsGranted(permissions);
        return  permissionUtils;
    }

    private boolean arePermissionsGranted(String... permissions) {
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && activity != null && permissions != null) {
            final ArrayList<String> needRequested = new ArrayList<>();
            for (String permission : permissions) {
                if (ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED) {
                    needRequested.add(permission);
                }
            }

            if(needRequested.size() > 0){
                CommonUtils.showDialog2Option(activity, "Permission", "we need all these permissions to run properly",
                        "OK", new Runnable() {
                            @Override
                            public void run() {
                                //need request permission
                                String[] needRequestedPermission = needRequested.toArray(new String[needRequested.size()]);
                                ActivityCompat.requestPermissions(activity, needRequestedPermission, requestCode);
                            }
                        }, "Cancel", new Runnable() {
                            @Override
                            public void run() {

                            }
                        });
                return false;
            }
        }
        return true;
    }


    public boolean isPermissionGranted(final String permission){
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && activity != null && permission != null) {
            if (ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED) {
                // Should we show an explanation?
                if (ActivityCompat.shouldShowRequestPermissionRationale(activity, permission)) {
                    // Show an explanation to the user *asynchronously* -- don't block
                    // this thread waiting for the user's response! After the user
                    // sees the explanation, try again to request the permission.
                    CommonUtils.showDialog2Option(activity, "Permission", "we need permission " + permission,
                            "cancel", new Runnable() {
                                @Override
                                public void run() {

                                }
                            }, "give", new Runnable() {
                                @Override
                                public void run() {
                                    ActivityCompat.requestPermissions(activity, new String[]{permission}, requestCode);
                                }
                            });

                } else {
                    // No explanation needed, we can request the permission.
                    ActivityCompat.requestPermissions(activity, new String[]{permission}, requestCode);
                }
                return false;
            }
            return true;
        }
        return true;
    }


    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults){
        if(requestCode == this.requestCode){
            // If request is cancelled, the result arrays are empty.
            ArrayList<String> deniedPermissions = new ArrayList<>();
            ArrayList<String> grantedPermissions = new ArrayList<>();
            if (grantResults.length > 0) {
                //partial cancelled
                int i = 0;
                for (int result : grantResults){
                    if(result == PackageManager.PERMISSION_DENIED){
                        deniedPermissions.add(permissions[i]);
                    }else if((result == PackageManager.PERMISSION_GRANTED)){
                        grantedPermissions.add(permissions[i]);
                    }
                    i++;
                }
            } else {
                //all cancelled
            }

            if(grantedPermissions.size() == permissions.length){
                //do task
                this.taskWillDo.run();
            }else{
                //there is some denied
                boolean isAnyNeverAskAgainChecked = false;
                for (String deniedPermission : deniedPermissions) {
                    if(!ActivityCompat.shouldShowRequestPermissionRationale(activity, deniedPermission)){
                        isAnyNeverAskAgainChecked = true;
                    }
                }
                if(isAnyNeverAskAgainChecked){
                    CommonUtils.showDialog2Option(activity, "Permission", "Sorry, because you already check never ask again " +
                                    "and we need all these permissions to run properly, please enable permission in this application setting",
                            "cancel", new Runnable() {
                                @Override
                                public void run() {

                                }
                            }, "go to setting", new Runnable() {
                                @Override
                                public void run() {
                                    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                                    Uri uri = Uri.fromParts("package", activity.getPackageName(), null);
                                    intent.setData(uri);
                                    activity.startActivity(intent);
                                }
                            });

                }
            }

        }
    }
}
